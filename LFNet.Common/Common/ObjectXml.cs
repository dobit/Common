using System;
using System.Collections;
using System.Reflection;
using System.Text;
using System.Xml;
using System.Xml.Serialization;

namespace LFNet.Common
{
    /// <summary>
    /// xml object 互相转换
    /// 目前实现 object to XML功能
    /// </summary>
    public static class ObjectXml
    {
        /// <summary>
        /// 转换成xml
        /// </summary>
        /// <param name="obj"></param>
        /// <param name="format">是否格式化输出文档</param>
        /// <returns></returns>
        public static string ToXml(this object obj, bool format = false)
        {
            if (obj == null) return "";
            StringBuilder sb = new StringBuilder();
            var xmlWriterSettings = GetXmlWriterSettings(format);
            XmlWriter writer = XmlWriter.Create(sb, xmlWriterSettings);
            writer.WriteComment("Generated by an xml tool class designed by dobit");
            ObjectToXml(obj, writer);
            writer.Flush();
            return sb.ToString().Replace("<?xml version=\"1.0\" encoding=\"utf-16\"?>", "<?xml version=\"1.0\" encoding=\"utf-8\"?>");
        }

        private static XmlWriterSettings GetXmlWriterSettings(bool format)
        {
            XmlWriterSettings xmlWriterSettings = new XmlWriterSettings();
            xmlWriterSettings.Encoding = Encoding.UTF8;

            if (format)
            {
                xmlWriterSettings.CheckCharacters = true;
                xmlWriterSettings.Indent = true;
                xmlWriterSettings.NewLineChars = System.Environment.NewLine;
            }
            xmlWriterSettings.OmitXmlDeclaration = false;

            return xmlWriterSettings;
        }

        private static void ObjectToXml(object obj, XmlWriter writer)
        {
            if (obj == null) return;
            Type type = obj.GetType();
            if (type.IsPrimitive || type == typeof(string) || type.IsEnum || type.IsValueType)
            {
                writer.WriteStartElement(type.Name);
                writer.WriteValue(obj.ToString());
                writer.WriteEndElement();
            }
            else if (type.Name.StartsWith("<>f__AnonymousType"))
            {
                writer.WriteStartElement("AnonymousType");
                PropertiesToXml(obj, type.GetProperties(), writer);
                writer.WriteEndElement();
            }
            else if (null != (obj as IDictionary))
            {
                IDictionary dictionary = obj as IDictionary;
                writer.WriteStartElement("Dictionary");
                foreach (var o in dictionary)
                {
                    ObjectToXml(o, writer);
                }
                writer.WriteEndElement();
            }
            else
            {
                string name = type.Name;
                int pos = name.IndexOf('`');
                if (pos > -1)
                {
                    name = name.Substring(0, pos);
                }
                writer.WriteStartElement(name);
                if (null != (obj as IEnumerable))
                {
                    foreach (object subObj in (IEnumerable)obj)
                    {
                        ObjectToXml(subObj, writer);
                    }
                }
                else
                    PropertiesToXml(obj, type.GetProperties(), writer);
                writer.WriteEndElement();
            }
        }

        private static void InternalToXml(object obj, XmlWriter writer)
        {
            if (obj == null) return;
            Type type = obj.GetType();
            if (type.IsPrimitive || type == typeof(string) || type.IsEnum || type.IsValueType)
            {
                writer.WriteValue(obj.ToString());
            }
            else
                if (null != (obj as IEnumerable))
                {
                    foreach (object subObj in (IEnumerable)obj)
                    {
                        ObjectToXml(subObj, writer);
                    }
                }
                else if (type.Name.StartsWith("<>f__AnonymousType"))
                {
                    PropertiesToXml(obj, type.GetProperties(), writer);
                }
                else
                {
                    PropertiesToXml(obj, type.GetProperties(), writer);
                    // ObjectToXml(obj, writer);
                }
        }


        private static void PropertiesToXml(object obj, PropertyInfo[] propertyInfos, XmlWriter writer)
        {
            if (obj == null) return;
            //先处理属性
            foreach (PropertyInfo propertyInfo in propertyInfos)
            {
                if (propertyInfo.CanRead)
                {
                    var name = propertyInfo.Name;
                    if (propertyInfo.GetCustomAttributes(typeof(XmlIgnoreAttribute), true).Length > 0) continue;
                    var attribs = propertyInfo.GetCustomAttributes(typeof(XmlAttributeAttribute), true);
                    if (attribs.Length > 0)
                    {
                        var attrib = (XmlAttributeAttribute) attribs[0];
                        if (!string.IsNullOrEmpty(attrib.AttributeName))
                            name = attrib.AttributeName;

                        //writer.WriteAttributeString(name, propertyInfo.GetGetMethod().Invoke(obj, null).ToString());

                        writer.WriteStartAttribute(name);
                        object o = propertyInfo.GetGetMethod().Invoke(obj, null);
                        if (o != null)
                            writer.WriteValue(o.ToString());
                        //writer.WriteString(propertyInfo.GetGetMethod().Invoke(obj, null).ToString());
                        //InternalToXml(propertyInfo.GetGetMethod().Invoke(obj, null), writer);
                        writer.WriteEndAttribute();
                    }
                    
                }
            }
            //处理元素 
            foreach (PropertyInfo propertyInfo in propertyInfos)
            {

                if (propertyInfo.CanRead)
                {
                    var name = propertyInfo.Name;
                    if (propertyInfo.GetCustomAttributes(typeof(XmlIgnoreAttribute), true).Length > 0) continue;

                    var attribs = propertyInfo.GetCustomAttributes(typeof(XmlAttributeAttribute), true);
                    if (attribs.Length > 0)
                    {
                        continue;
                    }
                    else
                    {
                        attribs = propertyInfo.GetCustomAttributes(typeof(XmlElementAttribute), true);
                        if (attribs.Length > 0)
                        {
                            var attrib = (XmlElementAttribute) attribs[0];
                            if (string.IsNullOrEmpty(attrib.ElementName)) name = attrib.ElementName;
                        }
                        writer.WriteStartElement(name);
                        InternalToXml(propertyInfo.GetGetMethod().Invoke(obj, null), writer);
                        writer.WriteEndElement();
                    }
                }
            }
        }
    }
}
